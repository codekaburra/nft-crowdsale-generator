// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CrowdsaleCreated extends ethereum.Event {
  get params(): CrowdsaleCreated__Params {
    return new CrowdsaleCreated__Params(this);
  }
}

export class CrowdsaleCreated__Params {
  _event: CrowdsaleCreated;

  constructor(event: CrowdsaleCreated) {
    this._event = event;
  }

  get crowdsale(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nft(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get arrayIndex(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class NFTCrowdsaleGenerator__createCrowdsaleResult {
  value0: BigInt;
  value1: Address;
  value2: Address;

  constructor(value0: BigInt, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getArrayIndex(): BigInt {
    return this.value0;
  }

  getNft(): Address {
    return this.value1;
  }

  getCrowdsale(): Address {
    return this.value2;
  }
}

export class NFTCrowdsaleGenerator__createCrowdsaleInput_nftConfigStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get maxSupply(): BigInt {
    return this[2].toBigInt();
  }
}

export class NFTCrowdsaleGenerator__createCrowdsaleInput_salePhrasesStruct extends ethereum.Tuple {
  get startTime(): BigInt {
    return this[0].toBigInt();
  }

  get durationInSec(): BigInt {
    return this[1].toBigInt();
  }

  get maxMintableNFTs(): BigInt {
    return this[2].toBigInt();
  }

  get maxMintableNFTsPerAddress(): BigInt {
    return this[3].toBigInt();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get whitelistedMerklRoot(): Bytes {
    return this[5].toBytes();
  }
}

export class NFTCrowdsaleGenerator extends ethereum.SmartContract {
  static bind(address: Address): NFTCrowdsaleGenerator {
    return new NFTCrowdsaleGenerator("NFTCrowdsaleGenerator", address);
  }

  createCrowdsale(
    _nftConfig: NFTCrowdsaleGenerator__createCrowdsaleInput_nftConfigStruct,
    _paymentToken: Address,
    _salePhrases: Array<
      NFTCrowdsaleGenerator__createCrowdsaleInput_salePhrasesStruct
    >
  ): NFTCrowdsaleGenerator__createCrowdsaleResult {
    let result = super.call(
      "createCrowdsale",
      "createCrowdsale((string,string,uint256),address,(uint256,uint256,uint256,uint256,uint256,bytes32)[]):(uint256,address,address)",
      [
        ethereum.Value.fromTuple(_nftConfig),
        ethereum.Value.fromAddress(_paymentToken),
        ethereum.Value.fromTupleArray(_salePhrases)
      ]
    );

    return new NFTCrowdsaleGenerator__createCrowdsaleResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_createCrowdsale(
    _nftConfig: NFTCrowdsaleGenerator__createCrowdsaleInput_nftConfigStruct,
    _paymentToken: Address,
    _salePhrases: Array<
      NFTCrowdsaleGenerator__createCrowdsaleInput_salePhrasesStruct
    >
  ): ethereum.CallResult<NFTCrowdsaleGenerator__createCrowdsaleResult> {
    let result = super.tryCall(
      "createCrowdsale",
      "createCrowdsale((string,string,uint256),address,(uint256,uint256,uint256,uint256,uint256,bytes32)[]):(uint256,address,address)",
      [
        ethereum.Value.fromTuple(_nftConfig),
        ethereum.Value.fromAddress(_paymentToken),
        ethereum.Value.fromTupleArray(_salePhrases)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTCrowdsaleGenerator__createCrowdsaleResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  crowdsales(param0: BigInt): Address {
    let result = super.call("crowdsales", "crowdsales(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_crowdsales(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("crowdsales", "crowdsales(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  crowdsalesLength(): BigInt {
    let result = super.call(
      "crowdsalesLength",
      "crowdsalesLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_crowdsalesLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "crowdsalesLength",
      "crowdsalesLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  indexes(param0: Address): BigInt {
    let result = super.call("indexes", "indexes(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_indexes(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("indexes", "indexes(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateCrowdsaleCall extends ethereum.Call {
  get inputs(): CreateCrowdsaleCall__Inputs {
    return new CreateCrowdsaleCall__Inputs(this);
  }

  get outputs(): CreateCrowdsaleCall__Outputs {
    return new CreateCrowdsaleCall__Outputs(this);
  }
}

export class CreateCrowdsaleCall__Inputs {
  _call: CreateCrowdsaleCall;

  constructor(call: CreateCrowdsaleCall) {
    this._call = call;
  }

  get _nftConfig(): CreateCrowdsaleCall_nftConfigStruct {
    return changetype<CreateCrowdsaleCall_nftConfigStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _paymentToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _salePhrases(): Array<CreateCrowdsaleCall_salePhrasesStruct> {
    return this._call.inputValues[2].value.toTupleArray<
      CreateCrowdsaleCall_salePhrasesStruct
    >();
  }
}

export class CreateCrowdsaleCall__Outputs {
  _call: CreateCrowdsaleCall;

  constructor(call: CreateCrowdsaleCall) {
    this._call = call;
  }

  get arrayIndex(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get nft(): Address {
    return this._call.outputValues[1].value.toAddress();
  }

  get crowdsale(): Address {
    return this._call.outputValues[2].value.toAddress();
  }
}

export class CreateCrowdsaleCall_nftConfigStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get maxSupply(): BigInt {
    return this[2].toBigInt();
  }
}

export class CreateCrowdsaleCall_salePhrasesStruct extends ethereum.Tuple {
  get startTime(): BigInt {
    return this[0].toBigInt();
  }

  get durationInSec(): BigInt {
    return this[1].toBigInt();
  }

  get maxMintableNFTs(): BigInt {
    return this[2].toBigInt();
  }

  get maxMintableNFTsPerAddress(): BigInt {
    return this[3].toBigInt();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get whitelistedMerklRoot(): Bytes {
    return this[5].toBytes();
  }
}
