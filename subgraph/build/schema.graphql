
type NFTCrowdsaleGenerator @entity(immutable: true) {
  id: Bytes! # address
  crowdsales: [NFTCrowdsale!]! @derivedFrom(field: "generator")
}


type NFTCrowdsale @entity(immutable: true) {
  id: Bytes! # address
  generator: NFTCrowdsaleGenerator!
  arrayIndexAtGenerator: BigInt! # uint256
  nft: NFT!
  owner: Bytes! # address
  # salePhrases: [NFTCrowdsaleSalePhrase!]! @derivedFrom(field: "crowdsale")
}

type NFTCrowdsaleSalePhrase @entity(immutable: true) {
  id: Bytes! # NFTCrowdsale address - SalePhraseIndex
  crowdsale: NFTCrowdsale!
  salePhraseIndex: Int! # uint8
  startTime: BigInt! # uint256
  durationInSec: BigInt! # uint256
  maxMintableNFTs: BigInt! # uint256
  maxMintableNFTsPerAddress: BigInt! # uint256
  price: BigInt! # uint256
  whitelistedMerklRoot: Bytes! # bytes32
}

type NFT @entity(immutable: true) {
  id: Bytes! # address
  crowdsales: [NFTCrowdsale!]! @derivedFrom(field: "nft")
}



type CrowdsaleCreated @entity(immutable: true) {
  id: Bytes!
  crowdsale: Bytes! # address
  nft: Bytes! # address
  arrayIndex: BigInt! # uint256
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}




type MintedNFTs @entity(immutable: true) {
  id: Bytes!
  _salePhrase: Int! # uint8
  _address: Bytes! # address
  numToMinted: BigInt! # uint256
  costToMint: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MintedRemainingNFTs @entity(immutable: true) {
  id: Bytes!
  _address: Bytes! # address
  numToMinted: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CrowdsaleOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetSale @entity(immutable: true) {
  id: Bytes!
  salePhraseIndex: Int! # uint8
  startTime: BigInt! # uint256
  durationInSec: BigInt! # uint256
  maxMintableNFTs: BigInt! # uint256
  maxMintableNFTsPerAddress: BigInt! # uint256
  price: BigInt! # uint256
  whitelistedMerklRoot: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}




type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NFTOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
