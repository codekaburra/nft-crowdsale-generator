/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockAssetWithdrawable,
  MockAssetWithdrawableInterface,
} from "../../../contracts/mock/MockAssetWithdrawable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "getNativeBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawAsset",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6105738061007e6000396000f3fe60806040526004361061004e5760003560e01c806338e4f0641461005a578063715018a61461006f57806388a9d554146100845780638da5cb5b146100a4578063f2fde38b146100cc57600080fd5b3661005557005b600080fd5b61006d610068366004610481565b6100ec565b005b34801561007b57600080fd5b5061006d610344565b34801561009057600080fd5b506040514781526020015b60405180910390f35b3480156100b057600080fd5b506000546040516001600160a01b03909116815260200161009b565b3480156100d857600080fd5b5061006d6100e73660046104ab565b61037a565b6000546001600160a01b0316331461011f5760405162461bcd60e51b8152600401610116906104cd565b60405180910390fd5b6001600160a01b03821661023c5747801561023757816101f557604051600090339083908381818185875af1925050503d806000811461017b576040519150601f19603f3d011682016040523d82523d6000602084013e610180565b606091505b50509050806101ef5760405162461bcd60e51b815260206004820152603560248201527f4173736574576974686472617761626c653a776974686472617741737365743a604482015274102330b4b632b2103a379039b2b7321022ba3432b960591b6064820152608401610116565b50505050565b604051600090339084908381818185875af1925050503d806000811461017b576040519150601f19603f3d011682016040523d82523d6000602084013e610180565b505050565b6040516370a0823160e01b81523060048201526000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610283573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a79190610502565b9050816102b2578091505b826001600160a01b031663a9059cbb6102d36000546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015610320573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ef919061051b565b6000546001600160a01b0316331461036e5760405162461bcd60e51b8152600401610116906104cd565b6103786000610415565b565b6000546001600160a01b031633146103a45760405162461bcd60e51b8152600401610116906104cd565b6001600160a01b0381166104095760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610116565b61041281610415565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461047c57600080fd5b919050565b6000806040838503121561049457600080fd5b61049d83610465565b946020939093013593505050565b6000602082840312156104bd57600080fd5b6104c682610465565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561051457600080fd5b5051919050565b60006020828403121561052d57600080fd5b815180151581146104c657600080fdfea2646970667358221220d43bc07d2d688fc3894574473bcb714b01db9cd7c5707b652bdb582775cf0c2a64736f6c634300080b0033";

type MockAssetWithdrawableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAssetWithdrawableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAssetWithdrawable__factory extends ContractFactory {
  constructor(...args: MockAssetWithdrawableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockAssetWithdrawable> {
    return super.deploy(overrides || {}) as Promise<MockAssetWithdrawable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockAssetWithdrawable {
    return super.attach(address) as MockAssetWithdrawable;
  }
  override connect(signer: Signer): MockAssetWithdrawable__factory {
    return super.connect(signer) as MockAssetWithdrawable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAssetWithdrawableInterface {
    return new utils.Interface(_abi) as MockAssetWithdrawableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAssetWithdrawable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockAssetWithdrawable;
  }
}
