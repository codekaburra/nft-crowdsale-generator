/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  INFTCrowdsaleGenerator,
  INFTCrowdsaleGeneratorInterface,
} from "../../../contracts/interfaces/INFTCrowdsaleGenerator";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "symbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "maxSupply",
            type: "uint256",
          },
        ],
        internalType: "struct INFTCrowdsaleGenerator.NFTConfig",
        name: "_nftConfig",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "_paymentToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "durationInSec",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxMintableNFTs",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxMintableNFTsPerAddress",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "whitelistedMerklRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct INFTCrowdsaleGenerator.SalePhrase[]",
        name: "_salePhrases",
        type: "tuple[]",
      },
    ],
    name: "createCrowdsale",
    outputs: [
      {
        internalType: "uint256",
        name: "arrayIndex",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "nft",
        type: "address",
      },
      {
        internalType: "address",
        name: "crowdsale",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "crowdsalesLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "crowdsale",
        type: "address",
      },
    ],
    name: "indexes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class INFTCrowdsaleGenerator__factory {
  static readonly abi = _abi;
  static createInterface(): INFTCrowdsaleGeneratorInterface {
    return new utils.Interface(_abi) as INFTCrowdsaleGeneratorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): INFTCrowdsaleGenerator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as INFTCrowdsaleGenerator;
  }
}
