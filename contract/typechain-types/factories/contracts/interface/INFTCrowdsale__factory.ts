/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  INFTCrowdsale,
  INFTCrowdsaleInterface,
} from "../../../contracts/interface/INFTCrowdsale";

const _abi = [
  {
    inputs: [],
    name: "getCurrentOrComingSalePhrase",
    outputs: [
      {
        internalType: "uint8",
        name: "currentOrComingSalePhrase",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_salePhraseIndex",
        type: "uint8",
      },
    ],
    name: "getMintPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "salePhraseIndex",
        type: "uint8",
      },
    ],
    name: "getSalePhrase",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "durationInSec",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxMintableNFTs",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxMintableNFTsPerAddress",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "whitelistedMerklRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct INFTCrowdsale.SalePhrase",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "getUserMintedTokens",
    outputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_salePhraseIndex",
        type: "uint8",
      },
    ],
    name: "isSaleActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "_merkleProof",
        type: "bytes32[]",
      },
      {
        internalType: "uint8",
        name: "_salePhraseIndex",
        type: "uint8",
      },
    ],
    name: "isWhitelistedAddress",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_numToAdopt",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "_merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "mintNFTs",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "mintRemainingNFTs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nft",
    outputs: [
      {
        internalType: "contract INFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "salePhraseIndex",
        type: "uint8",
      },
    ],
    name: "numOfMintedNFTs",
    outputs: [
      {
        internalType: "uint256",
        name: "num",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paymentToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "durationInSec",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxMintableNFTs",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxMintableNFTsPerAddress",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "whitelistedMerklRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct INFTCrowdsale.SalePhrase",
        name: "sale",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "_salePhraseIndex",
        type: "uint8",
      },
    ],
    name: "updateSalePhrase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_arrayIndex",
        type: "uint256",
      },
    ],
    name: "userMintedTokens",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "userMintedTokensLength",
    outputs: [
      {
        internalType: "uint256",
        name: "numOfTokens",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class INFTCrowdsale__factory {
  static readonly abi = _abi;
  static createInterface(): INFTCrowdsaleInterface {
    return new utils.Interface(_abi) as INFTCrowdsaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): INFTCrowdsale {
    return new Contract(address, _abi, signerOrProvider) as INFTCrowdsale;
  }
}
