/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace INFTCrowdsale {
  export type SalePhraseStruct = {
    startTime: PromiseOrValue<BigNumberish>;
    durationInSec: PromiseOrValue<BigNumberish>;
    maxMintableNFTs: PromiseOrValue<BigNumberish>;
    maxMintableNFTsPerAddress: PromiseOrValue<BigNumberish>;
    price: PromiseOrValue<BigNumberish>;
    whitelistedMerklRoot: PromiseOrValue<BytesLike>;
  };

  export type SalePhraseStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    startTime: BigNumber;
    durationInSec: BigNumber;
    maxMintableNFTs: BigNumber;
    maxMintableNFTsPerAddress: BigNumber;
    price: BigNumber;
    whitelistedMerklRoot: string;
  };
}

export interface NFTCrowdsaleInterface extends utils.Interface {
  functions: {
    "addSalePhrase((uint256,uint256,uint256,uint256,uint256,bytes32),uint8)": FunctionFragment;
    "getCurrentOrComingSalePhrase()": FunctionFragment;
    "getMintPrice(uint8)": FunctionFragment;
    "getSalePhrase(uint8)": FunctionFragment;
    "getUserMintedTokens(address)": FunctionFragment;
    "isSaleActive(uint8)": FunctionFragment;
    "isWhitelistedAddress(address,bytes32[],uint8)": FunctionFragment;
    "lastSalePhraseIndex()": FunctionFragment;
    "mintNFTs(uint256,bytes32[])": FunctionFragment;
    "mintRemainingNFTs()": FunctionFragment;
    "nft()": FunctionFragment;
    "numOfMintedNFTs(uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateSalePhrase((uint256,uint256,uint256,uint256,uint256,bytes32),uint8)": FunctionFragment;
    "userMintedTokens(address,uint256)": FunctionFragment;
    "userMintedTokensLength(address)": FunctionFragment;
    "withdrawAsset(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSalePhrase"
      | "getCurrentOrComingSalePhrase"
      | "getMintPrice"
      | "getSalePhrase"
      | "getUserMintedTokens"
      | "isSaleActive"
      | "isWhitelistedAddress"
      | "lastSalePhraseIndex"
      | "mintNFTs"
      | "mintRemainingNFTs"
      | "nft"
      | "numOfMintedNFTs"
      | "owner"
      | "paymentToken"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateSalePhrase"
      | "userMintedTokens"
      | "userMintedTokensLength"
      | "withdrawAsset"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSalePhrase",
    values: [INFTCrowdsale.SalePhraseStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentOrComingSalePhrase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSalePhrase",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMintedTokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSaleActive",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedAddress",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastSalePhraseIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintNFTs",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintRemainingNFTs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numOfMintedNFTs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSalePhrase",
    values: [INFTCrowdsale.SalePhraseStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userMintedTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userMintedTokensLength",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAsset",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSalePhrase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentOrComingSalePhrase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSalePhrase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMintedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSaleActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastSalePhraseIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintRemainingNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numOfMintedNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSalePhrase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMintedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userMintedTokensLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAsset",
    data: BytesLike
  ): Result;

  events: {
    "MintedNFTs(uint8,address,uint256,uint256)": EventFragment;
    "MintedRemainingNFTs(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetSale(uint8,uint256,uint256,uint256,uint256,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintedNFTs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintedRemainingNFTs"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSale"): EventFragment;
}

export interface MintedNFTsEventObject {
  _salePhrase: number;
  _address: string;
  numToMinted: BigNumber;
  costToMint: BigNumber;
}
export type MintedNFTsEvent = TypedEvent<
  [number, string, BigNumber, BigNumber],
  MintedNFTsEventObject
>;

export type MintedNFTsEventFilter = TypedEventFilter<MintedNFTsEvent>;

export interface MintedRemainingNFTsEventObject {
  _address: string;
  numToMinted: BigNumber;
}
export type MintedRemainingNFTsEvent = TypedEvent<
  [string, BigNumber],
  MintedRemainingNFTsEventObject
>;

export type MintedRemainingNFTsEventFilter =
  TypedEventFilter<MintedRemainingNFTsEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetSaleEventObject {
  salePhraseIndex: number;
  startTime: BigNumber;
  durationInSec: BigNumber;
  maxMintableNFTs: BigNumber;
  maxMintableNFTsPerAddress: BigNumber;
  price: BigNumber;
  whitelistedMerklRoot: string;
}
export type SetSaleEvent = TypedEvent<
  [number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string],
  SetSaleEventObject
>;

export type SetSaleEventFilter = TypedEventFilter<SetSaleEvent>;

export interface NFTCrowdsale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTCrowdsaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSalePhrase(
      _salePhrase: INFTCrowdsale.SalePhraseStruct,
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentOrComingSalePhrase(overrides?: CallOverrides): Promise<[number]>;

    getMintPrice(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSalePhrase(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[INFTCrowdsale.SalePhraseStructOutput]>;

    getUserMintedTokens(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isSaleActive(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedAddress(
      _address: PromiseOrValue<string>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastSalePhraseIndex(overrides?: CallOverrides): Promise<[number]>;

    mintNFTs(
      _numToMinted: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintRemainingNFTs(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    numOfMintedNFTs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentToken(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSalePhrase(
      _salePhrase: INFTCrowdsale.SalePhraseStruct,
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userMintedTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userMintedTokensLength(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawAsset(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addSalePhrase(
    _salePhrase: INFTCrowdsale.SalePhraseStruct,
    _salePhraseIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentOrComingSalePhrase(overrides?: CallOverrides): Promise<number>;

  getMintPrice(
    _salePhraseIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSalePhrase(
    _salePhraseIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<INFTCrowdsale.SalePhraseStructOutput>;

  getUserMintedTokens(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isSaleActive(
    _salePhraseIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedAddress(
    _address: PromiseOrValue<string>,
    _merkleProof: PromiseOrValue<BytesLike>[],
    _salePhraseIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastSalePhraseIndex(overrides?: CallOverrides): Promise<number>;

  mintNFTs(
    _numToMinted: PromiseOrValue<BigNumberish>,
    _merkleProof: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintRemainingNFTs(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nft(overrides?: CallOverrides): Promise<string>;

  numOfMintedNFTs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentToken(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSalePhrase(
    _salePhrase: INFTCrowdsale.SalePhraseStruct,
    _salePhraseIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userMintedTokens(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userMintedTokensLength(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawAsset(
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSalePhrase(
      _salePhrase: INFTCrowdsale.SalePhraseStruct,
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentOrComingSalePhrase(overrides?: CallOverrides): Promise<number>;

    getMintPrice(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSalePhrase(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<INFTCrowdsale.SalePhraseStructOutput>;

    getUserMintedTokens(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isSaleActive(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedAddress(
      _address: PromiseOrValue<string>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastSalePhraseIndex(overrides?: CallOverrides): Promise<number>;

    mintNFTs(
      _numToMinted: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintRemainingNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<string>;

    numOfMintedNFTs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentToken(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSalePhrase(
      _salePhrase: INFTCrowdsale.SalePhraseStruct,
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userMintedTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userMintedTokensLength(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAsset(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MintedNFTs(uint8,address,uint256,uint256)"(
      _salePhrase?: PromiseOrValue<BigNumberish> | null,
      _address?: PromiseOrValue<string> | null,
      numToMinted?: null,
      costToMint?: null
    ): MintedNFTsEventFilter;
    MintedNFTs(
      _salePhrase?: PromiseOrValue<BigNumberish> | null,
      _address?: PromiseOrValue<string> | null,
      numToMinted?: null,
      costToMint?: null
    ): MintedNFTsEventFilter;

    "MintedRemainingNFTs(address,uint256)"(
      _address?: PromiseOrValue<string> | null,
      numToMinted?: null
    ): MintedRemainingNFTsEventFilter;
    MintedRemainingNFTs(
      _address?: PromiseOrValue<string> | null,
      numToMinted?: null
    ): MintedRemainingNFTsEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SetSale(uint8,uint256,uint256,uint256,uint256,uint256,bytes32)"(
      salePhraseIndex?: null,
      startTime?: null,
      durationInSec?: null,
      maxMintableNFTs?: null,
      maxMintableNFTsPerAddress?: null,
      price?: null,
      whitelistedMerklRoot?: null
    ): SetSaleEventFilter;
    SetSale(
      salePhraseIndex?: null,
      startTime?: null,
      durationInSec?: null,
      maxMintableNFTs?: null,
      maxMintableNFTsPerAddress?: null,
      price?: null,
      whitelistedMerklRoot?: null
    ): SetSaleEventFilter;
  };

  estimateGas: {
    addSalePhrase(
      _salePhrase: INFTCrowdsale.SalePhraseStruct,
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentOrComingSalePhrase(overrides?: CallOverrides): Promise<BigNumber>;

    getMintPrice(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSalePhrase(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserMintedTokens(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSaleActive(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedAddress(
      _address: PromiseOrValue<string>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastSalePhraseIndex(overrides?: CallOverrides): Promise<BigNumber>;

    mintNFTs(
      _numToMinted: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintRemainingNFTs(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    numOfMintedNFTs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentToken(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSalePhrase(
      _salePhrase: INFTCrowdsale.SalePhraseStruct,
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userMintedTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userMintedTokensLength(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawAsset(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSalePhrase(
      _salePhrase: INFTCrowdsale.SalePhraseStruct,
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentOrComingSalePhrase(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMintPrice(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSalePhrase(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserMintedTokens(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSaleActive(
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedAddress(
      _address: PromiseOrValue<string>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastSalePhraseIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintNFTs(
      _numToMinted: PromiseOrValue<BigNumberish>,
      _merkleProof: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintRemainingNFTs(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numOfMintedNFTs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSalePhrase(
      _salePhrase: INFTCrowdsale.SalePhraseStruct,
      _salePhraseIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userMintedTokens(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userMintedTokensLength(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAsset(
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
